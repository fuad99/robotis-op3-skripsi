<!--
ddd
-->

<launch>
  
  <arg name="map_file" default="$(find my_pcl_tutorial)/map/lapangan.yaml"/>

  <node pkg="my_pcl_tutorial" type="cam2pcl" name="laser"  >
    </node>

    <!-- run pointcloud_to_laserscan node -->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">

        <remap from="cloud_in" to="cloud_pcl"/>
        <remap from="scan" to="laser_scan"/>
        <rosparam>
            target_frame: laser_link # Leave disabled to output scan in pointcloud frame
            transform_tolerance: 0.01
            min_height: -1.0
            max_height: 10.0

            angle_min: -3.10 # -M_PI
            angle_max: 3.10 # M_PI
            angle_increment: 0.0087 # M_PI/360.0
            scan_time: 0.3333
            range_min: 0.000
            range_max: 400.0
            use_inf: true
            inf_epsilon: 1.0

            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 1
        </rosparam>

    </node>

  <node pkg="tf" type="static_transform_publisher" name="base_tf" args="0.06 0 0.2 0 0 0 base_link laser_link 100" />
  <node pkg="rf2o_laser_odometry" type="rf2o_laser_odometry_node" name="rf2o_laser_odometry" output="screen">
    <param name="laser_scan_topic" value="/laser_scan"/>        # topic where the lidar scans are being published
    <param name="odom_topic" value="/odom_rf2o" />              # topic where tu publish the odometry estimations
    <param name="publish_tf" value="true" />                   # wheter or not to publish the tf::transform (base->odom)
    <param name="base_frame_id" value="base_link"/>            # frame_id (tf) of the mobile robot base. A tf transform from the laser_frame to the base_frame is mandatory
    <param name="odom_frame_id" value="odom_laser" />                # frame_id (tf) to publish the odometry estimations    
    <param name="freq" value="6.0"/>                            # Execution frequency.
    <param name="verbose" value="true" />                       # verbose
  </node>
  
  
  
   <node pkg="tf" type="static_transform_publisher" name="link2_broadcaster" args="-0.06 0 -0.49 0 0 0 laser_link map 100" />
   <node pkg="tf" type="static_transform_publisher" name="link3_broadcaster" args="-0.06 0 -0.33 0 0 0 map odom_laser 100" /> 

  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se" clear_params="false">
    <rosparam command="load" file="$(find robot_localization)/params/ekf_template.yaml" />

    <!--  Placeholder for output topic remapping
    <remap from="odometry/filtered" to=""/>
    <remap from="accel/filtered" to=""/>
    -->
	</node>
  <node name="usb_cam" pkg="usb_cam" type="usb_cam_node" output="screen" >
    <param name="video_device" value="/dev/video0" />
    <param name="image_width" value="640" />
    <param name="image_height" value="480" />
    <param name="pixel_format" value="yuyv" />
    <param name="camera_frame_id" value="usb_cam" />
    <param name="io_method" value="mmap"/>
    <param name="camera_info_url" value="package://my_pcl_tutorial/launch/calib.yaml" />
  </node>
  <node name="image_view" pkg="image_view" type="image_view" respawn="false" output="screen">
    <remap from="image" to="/usb_cam/image_raw"/>
    <param name="autosize" value="true" />
  </node>	

</launch>
